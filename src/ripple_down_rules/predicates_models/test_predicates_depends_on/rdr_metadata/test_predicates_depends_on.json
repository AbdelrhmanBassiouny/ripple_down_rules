{
    "_type": "ripple_down_rules.rdr.GeneralRDR",
    "start_rules": {
        "output_": {
            "_type": "ripple_down_rules.rdr.SingleClassRDR",
            "start_rule": {
                "_type": "ripple_down_rules.rules.SingleClassRule",
                "conditions": {
                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                    "user_input": "def _get_value(case):\n    def conditions_for_depends_on(parent_type: Type[TrackedObjectMixin], child_type: Type[TrackedObjectMixin], **kwargs) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for depends_on.output_  of type .\"\"\"\n        return parent_type.has(child_type)\n    return conditions_for_depends_on(**case)\n    ",
                    "conclusion_type": [
                        "builtins.bool"
                    ],
                    "scope": {
                        "Drawer": "test.datasets.Drawer",
                        "Handle": "test.datasets.Handle",
                        "Dict": "typing.Dict",
                        "Optional": "typing.Optional",
                        "Type": "typing.Type",
                        "Union": "typing.Union",
                        "NoneType": "builtins.NoneType",
                        "Case": "ripple_down_rules.datastructures.case.Case",
                        "TrackedObjectMixin": "ripple_down_rules.datastructures.tracked_object.TrackedObjectMixin"
                    },
                    "conclusion": {
                        "_type": "builtins.NoneType",
                        "value": null
                    },
                    "mutually_exclusive": true
                },
                "conclusion": {
                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                    "user_input": "def _get_value(case):\n    def depends_on(parent_type: Type[TrackedObjectMixin], child_type: Type[TrackedObjectMixin], **kwargs) -> bool:\n        \"\"\"Get possible value(s) for depends_on.output_  of type .\"\"\"\n        return True\n    return depends_on(**case)\n    ",
                    "conclusion_type": [
                        "builtins.bool"
                    ],
                    "scope": {
                        "Drawer": "test.datasets.Drawer",
                        "Handle": "test.datasets.Handle",
                        "Dict": "typing.Dict",
                        "Optional": "typing.Optional",
                        "Type": "typing.Type",
                        "Union": "typing.Union",
                        "NoneType": "builtins.NoneType",
                        "Case": "ripple_down_rules.datastructures.case.Case",
                        "TrackedObjectMixin": "ripple_down_rules.datastructures.tracked_object.TrackedObjectMixin"
                    },
                    "conclusion": {
                        "_type": "builtins.NoneType",
                        "value": null
                    },
                    "mutually_exclusive": true
                },
                "parent": null,
                "corner_case": null,
                "conclusion_name": "output_",
                "weight": "",
                "uid": "15107258415760040561965086064322061396",
                "refinement": null,
                "alternative": null
            },
            "generated_python_file_name": "depends_on_output__scrdr",
            "name": "output_",
            "case_type": "typing.Dict",
            "case_name": "depends_on"
        }
    },
    "generated_python_file_name": "depends_on_rdr",
    "name": "output_",
    "case_type": "typing.Dict",
    "case_name": "depends_on"
}