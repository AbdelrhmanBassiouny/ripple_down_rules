[
  "def _get_value(case):\n    drawers = []\n    for conn in case.connections:\n        if type(conn) is FixedConnection:\n            if type(conn.parent) is Container and type(conn.child) is Handle:\n                prismatic_connections = [c for c in case.connections if type(c) is PrismaticConnection]\n                for pc in prismatic_connections:\n                    if conn.parent is pc.child and type(pc.parent) is Container:\n                        drawers.append(Drawer(conn.child, conn.parent, world=case._original_object))\n                        \n    return drawers\n    ",
  "def _get_value(case):\n    has_handles = len([h for h in case.bodies if type(h) is Handle]) > 0\n    has_containers = len([c for c in case.bodies if type(c) is Container]) > 0\n    has_fixed_connections = len([fc for fc in case.connections if type(fc) is FixedConnection]) > 0\n    has_prismatic_connections = len([pc for pc in case.connections if type(pc) is PrismaticConnection]) > 0\n    return has_handles and has_containers and has_fixed_connections and has_prismatic_connections\n    ",
  "def _get_value(case):\n    drawers = [v for v in case.views if type(v) is Drawer]\n    prismatic_connections = [conn for conn in case.connections if type(conn) is PrismaticConnection]\n    cabinets = []\n    for pc in prismatic_connections:\n        for drawer in drawers:\n            if type(pc.parent) is Container and pc.child.name == drawer.container.name:\n                current_cabinets_containers = [v.container.name for v in case._original_object.views if type(v) is Cabinet]\n                if pc.parent.name not in current_cabinets_containers:\n                    cabinets.append(Cabinet(pc.parent, [drawer], world=case._original_object))\n                else:\n                    existing_cabinet = [v for v in case._original_object.views if type(v) is Cabinet and v.container.name == pc.parent.name][0]\n                    if drawer not in existing_cabinet.drawers:\n                        existing_cabinet.drawers.append(drawer)\n                        \n    return cabinets\n    ",
  "def _get_value(case):\n    has_drawers = len([v for v in case.views if type(v) is Drawer]) > 0\n    return has_drawers\n    ",
  "def _get_value(case):\n    drawers = [v for v in case.views if type(v) is Drawer]\n    prismatic_connections = [conn for conn in case.connections if type(conn) is PrismaticConnection]\n    cabinets = []\n    for pc in prismatic_connections:\n        for drawer in drawers:\n            if type(pc.parent) is Container and pc.child.name == drawer.container.name:\n                current_cabinets_containers = [v.container.name for v in case.views + case._original_object.views if type(v) is Cabinet]\n                if pc.parent.name not in current_cabinets_containers:\n                    cabinets.append(Cabinet(pc.parent, [drawer], world=case._original_object))\n                else:\n                    existing_cabinet = [v for v in case.views + case._original_object.views if type(v) is Cabinet and v.container.name == pc.parent.name][0]\n                    if drawer not in existing_cabinet.drawers:\n                        existing_cabinet.drawers.append(drawer)\n                        \n    return cabinets\n    ",
  "def _get_value(case):\n    has_drawers = len([v for v in case.views if type(v) is Drawer]) > 0\n    return has_drawers\n    ",
  null
]